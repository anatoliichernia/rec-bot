import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import json

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
scope = [
    'https://spreadsheets.google.com/feeds',
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive.file',
    'https://www.googleapis.com/auth/drive'
]

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
if not creds_json:
    raise Exception("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ GOOGLE_CREDENTIALS_JSON —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")

creds_dict = json.loads(creds_json)
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gc = gspread.authorize(credentials)

SPREADSHEET_ID = '1_obQhP9sZL4Q5oB5V1y5mRiGwRMCYXVMXVseDe1tKPw'
sheet = gc.open_by_key(SPREADSHEET_ID).sheet1

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ä–µ—Ü–µ–ø—Ç—ñ–≤. –û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞:"
    )
    await send_categories_menu(update, context)

# –ö–æ–º–∞–Ω–¥–∞ /menu ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—É—î –º–µ–Ω—é
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_categories_menu(update, context)

# –ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
async def send_categories_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    records = sheet.get_all_records()
    categories = sorted(set(r['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è'].strip() for r in records))

    keyboard = [[InlineKeyboardButton(cat, callback_data=cat)] for cat in categories]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(text="–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)
    else:
        await update.message.reply_text(text="–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    category = query.data.strip().lower()
    records = sheet.get_all_records()

    matched = [r for r in records if r['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è'].strip().lower() == category]

    if not matched:
        await query.edit_message_text("–ó–∞ —Ü—ñ—î—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –Ω–µ–º–∞—î.")
        return

    # –ö–Ω–æ–ø–∫–∏ –∑ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
    buttons = [
        [InlineKeyboardButton(r['–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ '].strip(), url=r['–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ—Ü–µ–ø—Ç '].strip())]
        for r in matched
    ]
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é
    buttons.append([InlineKeyboardButton("üîô –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", callback_data="menu")])

    reply_markup = InlineKeyboardMarkup(buttons)

    await query.edit_message_text(
        text=f"–†–µ—Ü–µ–ø—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é '{category}':",
        reply_markup=reply_markup
    )

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"
async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_categories_menu(update, context)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(handle_menu_callback, pattern="^menu$"))
    app.add_handler(CallbackQueryHandler(button_handler))

    app.run_polling()

if __name__ == '__main__':
    main()

